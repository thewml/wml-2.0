#!/bin/sh
##
##  GNU shtool -- The GNU Portable Shell Tool
##  Copyright (c) 1994-2002 Ralf S. Engelschall <rse@engelschall.com>
##
##  See http://www.gnu.org/software/shtool/ for more information.
##  See ftp://ftp.gnu.org/gnu/shtool/ for latest version.
##
##  Version:  1.6.0 (01-Feb-2002)
##  Contents: 2/19 available modules
##

##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
##  General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
##  USA, or contact Ralf S. Engelschall <rse@engelschall.com>.
##
##  NOTICE: Given that you include this file verbatim into your own
##  source tree, you are justified in saying that it remains separate
##  from your package, and that this way you are simply just using GNU
##  shtool. So, in this situation, there is no requirement that your
##  package itself is licensed under the GNU General Public License in
##  order to take advantage of GNU shtool.
##

##
##  Usage: shtool [<options>] [<cmd-name> [<cmd-options>] [<cmd-args>]]
##
##  Available commands:
##    echo       Print string with optional construct expansion
##    version    Maintain a version information file
##
##  Not available commands (because module was not built-in):
##    mdate      Pretty-print modification time of a file or dir
##    table      Pretty-print a field-separated list as a table
##    prop       Display progress with a running propeller
##    move       Move files with simultaneous substitution
##    install    Install a program, script or datafile
##    mkdir      Make one or more directories
##    mkln       Make link with calculation of relative paths
##    mkshadow   Make a shadow tree through symbolic links
##    fixperm    Fix file permissions inside a source tree
##    rotate     Logfile rotation
##    tarball    Roll distribution tarballs
##    subst      Apply sed(1) substitution operations
##    guessos    Simple operating system guesser
##    arx        Extended archive command
##    slo        Separate linker options by library class
##    scpp       Sharing C Pre-Processor
##    path       Deal with program paths
##

if [ $# -eq 0 ]; then
    echo "$0:Error: invalid command line" 1>&2
    echo "$0:Hint:  run \`$0 -h' for usage" 1>&2
    exit 1
fi
if [ ".$1" = ".-h" -o ".$1" = ".--help" ]; then
    echo "This is GNU shtool, version 1.6.0 (01-Feb-2002)"
    echo "Copyright (c) 1994-2002 Ralf S. Engelschall <rse@engelschall.com>"
    echo "Report bugs to <bug-shtool@gnu.org>"
    echo ''
    echo "Usage: shtool [<options>] [<cmd-name> [<cmd-options>] [<cmd-args>]]"
    echo ''
    echo 'Available global <options>:'
    echo '  -v, --version   display shtool version information'
    echo '  -h, --help      display shtool usage help page (this one)'
    echo '  -d, --debug     display shell trace information'
    echo '  -r, --recreate  recreate this shtool script via shtoolize'
    echo ''
    echo 'Available <cmd-name> [<cmd-options>] [<cmd-args>]:'
    echo '  echo     [-n|--newline] [-e|--expand] [<str> ...]'
    echo '  version  [-l|--language <lang>] [-n|--name <name>] [-p|--prefix'
    echo '           <prefix>] [-s|--set <version>] [-e|--edit] [-i|--increase'
    echo '           <knob>] [-d|--display <type>] <file>'
    echo ''
    echo 'Not available <cmd-name> (because module was not built-in):'
    echo '  mdate    [-n|--newline] [-z|--zero] [-s|--shorten] [-d|--digits]'
    echo '           [-f|--field-sep <str>] [-o|--order <spec>] <path>'
    echo '  table    [-F|--field-sep <sep>] [-w|--width <width>] [-c|--columns'
    echo '           <cols>] [-s|--strip <strip>] <str><sep><str>...'
    echo '  prop     [-p|--prefix <str>]'
    echo '  move     [-v|--verbose] [-t|--trace] [-e|--expand] [-p|--preserve]'
    echo '           <src-file> <dst-file>'
    echo '  install  [-v|--verbose] [-t|--trace] [-c|--copy] [-C|--compare-copy]'
    echo '           [-s|--strip] [-m|--mode <mode>] [-o|--owner <owner>]'
    echo '           [-g|--group <group>] [-e|--exec <sed-cmd>] <file> [<file>'
    echo '           ...] <path>'
    echo '  mkdir    [-t|--trace] [-f|--force] [-p|--parents] [-m|--mode'
    echo '           <mode>] <dir> [<dir> ...]'
    echo '  mkln     [-t|--trace] [-f|--force] [-s|--symbolic] <src-path>'
    echo '           [<src-path> ...] <dst-path>'
    echo '  mkshadow [-v|--verbose] [-t|--trace] [-a|--all] <src-dir> <dst-dir>'
    echo '  fixperm  [-v|--verbose] [-t|--trace] <path> [<path> ...]'
    echo '  rotate   [-v|--verbose] [-t|--trace] [-f|--force] [-n|--num-files'
    echo '           <count>] [-s|--min-size <size>] [-c|--copy] [-r|--remove]'
    echo '           [-a|--archive-dir <dir>] [-z|--compress [<tool>:]<level>]'
    echo '           [-b|--background] [-d|--delay] [-p|--pad <len>] [-o|--owner'
    echo '           <owner>] [-g|--group <group>] [-m|--mode <mode>] [-M|--migrate'
    echo '           <cmd>] [-P|--prolog <cmd>] [-E|--epilog <cmd>] <file> [...]'
    echo '  tarball  [-t|--trace] [-v|--verbose] [-o|--output <tarball>]'
    echo '           [-c|--compress <prog>] [-d|--directory <dir>] [-u|--user'
    echo '           <user>] [-g|--group <group>] [-e|--exclude <pattern>]'
    echo '           <path> [<path> ...]'
    echo '  subst    [-v|--verbose] [-t|--trace] [-n|--nop] [-s|--stealth]'
    echo '           [-i|--interactive] [-b|--backup <ext>] [-e|--exec <cmd>]'
    echo '           [-f|--file <cmd-file>] [<file>] [...]'
    echo '  guessos  '
    echo '  arx      [-t|--trace] [-C|--command <cmd>] <op> <archive> [<file>'
    echo '           ...]'
    echo '  slo      [-p|--prefix <str>] -- -L<dir> -l<lib> [-L<dir> -l<lib>'
    echo '           ...]'
    echo '  scpp     [-v|--verbose] [-p|--preserve] [-f|--filter <filter>]'
    echo '           [-o|--output <ofile>] [-t|--template <tfile>] [-M|--mark'
    echo '           <mark>] [-D|--define <dname>] [-C|--class <cname>]'
    echo '           <file> [<file> ...]'
    echo '  path     [-s|--suppress] [-r|--reverse] [-d|--dirname] [-b|--basename]'
    echo '           [-m|--magic] [-p|--path <path>] <str> [<str> ...]'
    echo ''
    exit 0
fi
if [ ".$1" = ".-v" -o ".$1" = ."--version" ]; then
    echo "GNU shtool 1.6.0 (01-Feb-2002)"
    exit 0
fi
if [ ".$1" = ".-r" -o ".$1" = ."--recreate" ]; then
    shtoolize -oshtool echo version
    exit 0
fi
if [ ".$1" = ".-d" -o ".$1" = ."--debug" ]; then
    shift
    set -x
fi
name=`echo "$0" | sed -e 's;.*/\([^/]*\)$;\1;' -e 's;-sh$;;' -e 's;\.sh$;;'`
case "$name" in
    echo|version )
        #   implicit tool command selection
        tool="$name"
        ;;
    * )
        #   explicit tool command selection
        tool="$1"
        shift
        ;;
esac
arg_spec=""
opt_spec=""
gen_tmpfile=no

##
##  DISPATCH INTO SCRIPT PROLOG
##

case $tool in
    echo )
        str_tool="echo"
        str_usage="[-n|--newline] [-e|--expand] [<str> ...]"
        arg_spec="0+"
        opt_spec="n.e."
        opt_alias="n:newline,e:expand"
        opt_n=no
        opt_e=no
        ;;
    version )
        str_tool="version"
        str_usage="[-l|--language <lang>] [-n|--name <name>] [-p|--prefix <prefix>] [-s|--set <version>] [-e|--edit] [-i|--increase <knob>] [-d|--display <type>] <file>"
        arg_spec="1="
        opt_spec="l:n:p:s:i:e.d:"
        opt_alias="l:language,n:name,p:prefix,s:set,e:edit,i:increase,d:display"
        opt_l="txt"
        opt_n="unknown"
        opt_p=""
        opt_s=""
        opt_e="no"
        opt_i=""
        opt_d="short"
        ;;
    -* )
        echo "$0:Error: unknown option \`$tool'" 2>&1
        echo "$0:Hint:  run \`$0 -h' for usage" 2>&1
        exit 1
        ;;
    * )
        echo "$0:Error: unknown command \`$tool'" 2>&1
        echo "$0:Hint:  run \`$0 -h' for usage" 2>&1
        exit 1
        ;;
esac

##
##  COMMON UTILITY CODE
##

#   commonly used ASCII values
ASC_TAB="	"
ASC_NL="
"

#   determine name of tool
if [ ".$tool" != . ]; then
    #   used inside shtool script
    toolcmd="$0 $tool"
    toolcmdhelp="shtool $tool"
    msgprefix="shtool:$tool"
else
    #   used as standalone script
    toolcmd="$0"
    toolcmdhelp="sh $0"
    msgprefix="$str_tool"
fi

#   parse argument specification string
eval `echo $arg_spec |\
      sed -e 's/^\([0-9]*\)\([+=]\)/arg_NUMS=\1; arg_MODE=\2/'`

#   parse option specification string
eval `echo h.$opt_spec |\
      sed -e 's/\([a-zA-Z0-9]\)\([.:+]\)/opt_MODE_\1=\2;/g'`

#   parse option alias string
eval `echo h:help,$opt_alias |\
      tr 'x-' 'x_' | sed -e 's/\([a-zA-Z0-9]\):\([^,]*\),*/opt_ALIAS_\2=\1;/g'`

#   interate over argument line
opt_PREV=''
while [ $# -gt 0 ]; do
    #   special option stops processing
    if [ ".$1" = ".--" ]; then
        shift
        break
    fi

    #   determine option and argument
    opt_ARG_OK=no
    if [ ".$opt_PREV" != . ]; then
        #   merge previous seen option with argument
        opt_OPT="$opt_PREV"
        opt_ARG="$1"
        opt_ARG_OK=yes
        opt_PREV=''
    else
        #   split argument into option and argument
        case "$1" in
            --[a-zA-Z0-9]*=*)
                eval `echo "x$1" |\
                      sed -e 's/^x--\([a-zA-Z0-9-]*\)=\(.*\)$/opt_OPT="\1";opt_ARG="\2"/'`
                opt_STR=`echo $opt_OPT | tr 'x-' 'x_'`
                eval "opt_OPT=\${opt_ALIAS_${opt_STR}-${opt_OPT}}"
                ;;
            --[a-zA-Z0-9]*)
                opt_OPT=`echo "x$1" | cut -c4-`
                opt_STR=`echo $opt_OPT | tr 'x-' 'x_'`
                eval "opt_OPT=\${opt_ALIAS_${opt_STR}-${opt_OPT}}"
                opt_ARG=''
                ;;
            -[a-zA-Z0-9]*)
                eval `echo "x$1" |\
                      sed -e 's/^x-\([a-zA-Z0-9]\)/opt_OPT="\1";/' \
                          -e 's/";\(.*\)$/"; opt_ARG="\1"/'`
                ;;
            -[a-zA-Z0-9])
                opt_OPT=`echo "x$1" | cut -c3-`
                opt_ARG=''
                ;;
            *)
                break
                ;;
        esac
    fi

    #   eat up option
    shift

    #   determine whether option needs an argument
    eval "opt_MODE=\$opt_MODE_${opt_OPT}"
    if [ ".$opt_ARG" = . -a ".$opt_ARG_OK" != .yes ]; then
        if [ ".$opt_MODE" = ".:" -o ".$opt_MODE" = ".+" ]; then
            opt_PREV="$opt_OPT"
            continue
        fi
    fi

    #   process option
    case $opt_MODE in
        '.' )
            #   boolean option
            eval "opt_${opt_OPT}=yes"
            ;;
        ':' )
            #   option with argument (multiple occurances override)
            eval "opt_${opt_OPT}=\"\$opt_ARG\""
            ;;
        '+' )
            #   option with argument (multiple occurances append)
            eval "opt_${opt_OPT}=\"\$opt_${opt_OPT}\${ASC_NL}\$opt_ARG\""
            ;;
        * )
            echo "$msgprefix:Error: unknown option: \`$opt_OPT'" 1>&2
            echo "$msgprefix:Hint:  run \`$toolcmdhelp -h' or \`man shtool' for details" 1>&2
            exit 1
            ;;
    esac
done
if [ ".$opt_PREV" != . ]; then
    echo "$msgprefix:Error: missing argument to option \`$opt_PREV'" 1>&2
    echo "$msgprefix:Hint:  run \`$toolcmdhelp -h' or \`man shtool' for details" 1>&2
    exit 1
fi

#   process help option
if [ ".$opt_h" = .yes ]; then
    echo "Usage: $toolcmdhelp $str_usage"
    exit 0
fi

#   complain about incorrect number of arguments
case $arg_MODE in
    '=' )
        if [ $# -ne $arg_NUMS ]; then
            echo "$msgprefix:Error: invalid number of arguments (exactly $arg_NUMS expected)" 1>&2
            echo "$msgprefix:Hint:  run \`$toolcmd -h' or \`man shtool' for details" 1>&2
            exit 1
        fi
        ;;
    '+' )
        if [ $# -lt $arg_NUMS ]; then
            echo "$msgprefix:Error: invalid number of arguments (at least $arg_NUMS expected)" 1>&2
            echo "$msgprefix:Hint:  run \`$toolcmd -h' or \`man shtool' for details" 1>&2
            exit 1
        fi
        ;;
esac

#   establish a temporary file on request
if [ ".$gen_tmpfile" = .yes ]; then
    if [ ".$TMPDIR" != . ]; then
        tmpdir="$TMPDIR"
    elif [ ".$TEMPDIR" != . ]; then
        tmpdir="$TEMPDIR"
    else
        tmpdir="/tmp"
    fi
    tmpfile="$tmpdir/.shtool.$$"
    rm -f $tmpfile >/dev/null 2>&1
    touch $tmpfile
    chmod 600 $tmpfile
fi

##
##  DISPATCH INTO SCRIPT BODY
##

case $tool in

echo )
    ##
    ##  echo -- Print string with optional construct expansion
    ##  Copyright (c) 1998-2002 Ralf S. Engelschall <rse@engelschall.com>
    ##  Originally written for WML as buildinfo
    ##
    
    text="$*"
    
    #   check for broken escape sequence expansion
    seo=''
    bytes=`echo '\1' | wc -c | awk '{ printf("%s", $1); }'`
    if [ ".$bytes" != .3 ]; then
        bytes=`echo -E '\1' | wc -c | awk '{ printf("%s", $1); }'`
        if [ ".$bytes" = .3 ]; then
            seo='-E'
        fi
    fi
    
    #   check for existing -n option (to suppress newline)
    minusn=''
    bytes=`echo -n 123 2>/dev/null | wc -c | awk '{ printf("%s", $1); }'`
    if [ ".$bytes" = .3 ]; then
        minusn='-n'
    fi
    
    #   determine terminal bold sequence
    term_bold=''
    term_norm=''
    if [ ".$opt_e" = .yes -a ".`echo $text | egrep '%[Bb]'`" != . ]; then
        case $TERM in
            #   for the most important terminal types we directly know the sequences
            xterm|xterm*|vt220|vt220*)
                term_bold=`awk 'BEGIN { printf("%c%c%c%c", 27, 91, 49, 109); }' </dev/null 2>/dev/null`
                term_norm=`awk 'BEGIN { printf("%c%c%c", 27, 91, 109); }' </dev/null 2>/dev/null`
                ;;
            vt100|vt100*)
                term_bold=`awk 'BEGIN { printf("%c%c%c%c%c%c", 27, 91, 49, 109, 0, 0); }' </dev/null 2>/dev/null`
                term_norm=`awk 'BEGIN { printf("%c%c%c%c%c", 27, 91, 109, 0, 0); }' </dev/null 2>/dev/null`
                ;;
            #   for all others, we try to use a possibly existing `tput' or `tcout' utility
            * )
                paths=`echo $PATH | sed -e 's/:/ /g'`
                for tool in tput tcout; do
                    for dir in $paths; do
                        if [ -r "$dir/$tool" ]; then
                            for seq in bold md smso; do # 'smso' is last
                                bold="`$dir/$tool $seq 2>/dev/null`"
                                if [ ".$bold" != . ]; then
                                    term_bold="$bold"
                                    break
                                fi
                            done
                            if [ ".$term_bold" != . ]; then
                                for seq in sgr0 me rmso reset; do # 'reset' is last
                                    norm="`$dir/$tool $seq 2>/dev/null`"
                                    if [ ".$norm" != . ]; then
                                        term_norm="$norm"
                                        break
                                    fi
                                done
                            fi
                            break
                        fi
                    done
                    if [ ".$term_bold" != . -a ".$term_norm" != . ]; then
                        break;
                    fi
                done
                ;;
        esac
        if [ ".$term_bold" = . -o ".$term_norm" = . ]; then
            echo "$msgprefix:Warning: unable to determine terminal sequence for bold mode" 1>&2
        fi
    fi
    
    #   determine user name
    username=''
    if [ ".$opt_e" = .yes -a ".`echo $text | egrep '%[uUgG]'`" != . ]; then
        username="$LOGNAME"
        if [ ".$username" = . ]; then
            username="$USER"
            if [ ".$username" = . ]; then
                username="`(whoami) 2>/dev/null |\
                           awk '{ printf("%s", $1); }'`"
                if [ ".$username" = . ]; then
                    username="`(who am i) 2>/dev/null |\
                               awk '{ printf("%s", $1); }'`"
                    if [ ".$username" = . ]; then
                        username='unknown'
                    fi
                fi
            fi
        fi
    fi
    
    #   determine user id
    userid=''
    if [ ".$opt_e" = .yes -a ".`echo $text | egrep '%U'`" != . ]; then
        userid="`(id -u) 2>/dev/null`"
        if [ ".$userid" = . ]; then
            str="`(id) 2>/dev/null`"
            if [ ".`echo $str | grep '^uid[ 	]*=[ 	]*[0-9]*('`" != . ]; then
                userid=`echo $str | sed -e 's/^uid[ 	]*=[ 	]*//' -e 's/(.*//'`
            fi
            if [ ".$userid" = . ]; then
                userid=`egrep "^${username}:" /etc/passwd 2>/dev/null | \
                        sed -e 's/[^:]*:[^:]*://' -e 's/:.*$//'`
                if [ ".$userid" = . ]; then
                    userid=`(ypcat passwd) 2>/dev/null |
                            egrep "^${username}:" | \
                            sed -e 's/[^:]*:[^:]*://' -e 's/:.*$//'`
                    if [ ".$userid" = . ]; then
                        userid='?'
                    fi
                fi
            fi
        fi
    fi
    
    #   determine (primary) group id
    groupid=''
    if [ ".$opt_e" = .yes -a ".`echo $text | egrep '%[gG]'`" != . ]; then
        groupid=`egrep "^${username}:" /etc/passwd 2>/dev/null | \
                 sed -e 's/[^:]*:[^:]*:[^:]*://' -e 's/:.*$//'`
        if [ ".$groupid" = . ]; then
            groupid=`(ypcat passwd) 2>/dev/null | egrep "^${username}:" | \
                     sed -e 's/[^:]*:[^:]*:[^:]*://' -e 's/:.*$//'`
            if [ ".$groupid" = . ]; then
                groupid='?'
            fi
        fi
    fi
    
    #   determine (primary) group name
    groupname=''
    if [ ".$opt_e" = .yes -a ".`echo $text | egrep '%g'`" != . ]; then
        groupname=`egrep "^[^:]*:[^:]*:${groupid}:" /etc/group 2>/dev/null | \
                   sed -e 's/:.*$//'`
        if [ ".$groupname" = . ]; then
            groupname=`(ypcat group) 2>/dev/null | \
                       egrep "^[^:]*:[^:]*:${groupid}:" | \
                       sed -e 's/:.*$//'`
            if [ ".$groupname" = . ]; then
                groupname='?'
            fi
        fi
    fi
    
    #   determine host and domain name
    hostname=''
    domainname=''
    if [ ".$opt_e" = .yes -a ".`echo $text | egrep '%h'`" != . ]; then
        hostname="`(uname -n) 2>/dev/null |\
                   awk '{ printf("%s", $1); }'`"
        if [ ".$hostname" = . ]; then
            hostname="`(hostname) 2>/dev/null |\
                       awk '{ printf("%s", $1); }'`"
            if [ ".$hostname" = . ]; then
                hostname='unknown'
            fi
        fi
        case $hostname in
            *.* )
                domainname=".`echo $hostname | cut -d. -f2-`"
                hostname="`echo $hostname | cut -d. -f1`"
                ;;
        esac
    fi
    if [ ".$opt_e" = .yes -a ".`echo $text | egrep '%d'`" != . ]; then
        if [ ".$domainname" = . ]; then
            if [ -f /etc/resolv.conf ]; then
                domainname="`egrep '^[ 	]*domain' /etc/resolv.conf | head -1 |\
                             sed -e 's/.*domain//' \
                                 -e 's/^[ 	]*//' -e 's/^ *//' -e 's/^	*//' \
                                 -e 's/^\.//' -e 's/^/./' |\
                             awk '{ printf("%s", $1); }'`"
                if [ ".$domainname" = . ]; then
                    domainname="`egrep '^[ 	]*search' /etc/resolv.conf | head -1 |\
                                 sed -e 's/.*search//' \
                                     -e 's/^[ 	]*//' -e 's/^ *//' -e 's/^	*//' \
                                     -e 's/ .*//' -e 's/	.*//' \
                                     -e 's/^\.//' -e 's/^/./' |\
                                 awk '{ printf("%s", $1); }'`"
                fi
            fi
        fi
    fi
    
    #   determine current time
    time_day=''
    time_month=''
    time_year=''
    time_monthname=''
    if [ ".$opt_e" = .yes -a ".`echo $text | egrep '%[DMYm]'`" != . ]; then
        time_day=`date '+%d'`
        time_month=`date '+%m'`
        time_year=`date '+%Y' 2>/dev/null`
        if [ ".$time_year" = . ]; then
            time_year=`date '+%y'`
            case $time_year in
                [5-9][0-9]) time_year="19$time_year" ;;
                [0-4][0-9]) time_year="20$time_year" ;;
            esac
        fi
        case $time_month in
            1|01) time_monthname='Jan' ;;
            2|02) time_monthname='Feb' ;;
            3|03) time_monthname='Mar' ;;
            4|04) time_monthname='Apr' ;;
            5|05) time_monthname='May' ;;
            6|06) time_monthname='Jun' ;;
            7|07) time_monthname='Jul' ;;
            8|08) time_monthname='Aug' ;;
            9|09) time_monthname='Sep' ;;
              10) time_monthname='Oct' ;;
              11) time_monthname='Nov' ;;
              12) time_monthname='Dec' ;;
        esac
    fi
    
    #   expand special ``%x'' constructs
    if [ ".$opt_e" = .yes ]; then
        text=`echo $seo "$text" |\
              sed -e "s/%B/${term_bold}/g" \
                  -e "s/%b/${term_norm}/g" \
                  -e "s/%u/${username}/g" \
                  -e "s/%U/${userid}/g" \
                  -e "s/%g/${groupname}/g" \
                  -e "s/%G/${groupid}/g" \
                  -e "s/%h/${hostname}/g" \
                  -e "s/%d/${domainname}/g" \
                  -e "s/%D/${time_day}/g" \
                  -e "s/%M/${time_month}/g" \
                  -e "s/%Y/${time_year}/g" \
                  -e "s/%m/${time_monthname}/g" 2>/dev/null`
    fi
    
    #   create output
    if [ .$opt_n = .no ]; then
        echo $seo "$text"
    else
        #   the harder part: echo -n is best, because
        #   awk may complain about some \xx sequences.
        if [ ".$minusn" != . ]; then
            echo $seo $minusn "$text"
        else
            echo dummy | awk '{ printf("%s", TEXT); }' TEXT="$text"
        fi
    fi
    ;;

version )
    ##
    ##  version -- Maintain a version information file
    ##  Copyright (c) 1994-2002 Ralf S. Engelschall <rse@engelschall.com>
    ##  Originally written for ePerl, rewritten from scratch for shtool
    ##
    
    file="$1"
    
    #   determine prefix and name
    name="$opt_n"
    prefix="$opt_p"
    
    #   determine current version
    triple="$opt_s"
    if [ ".$triple" != . ]; then
        #   use given triple
        if [ ".`echo $triple | grep '[0-9]*.[0-9]*[sabp.][0-9]*'`" = . ]; then
            echo "$msgprefix:Error: invalid argument to option \`-s': \`$opt_s'" 1>&2
            exit 1
        fi
        eval `echo $triple |\
              sed -e 's%\([0-9]*\)\.\([0-9]*\)\([sabp.]\)\([0-9]*\).*%\
              ver="\1";rev="\2";typ="\3";lev="\4"%'`
        tim=calc
    elif [ -r $file ]; then
        #   determine triple from given file
        eval `grep 'Version [0-9]*.[0-9]*[sabp.][0-9]* ([0-9]*-[a-zA-Z]*-[0-9]*)' $file |\
              head -1 | sed -e 's%.*Version \([0-9]*\)\.\([0-9]*\)\([sabp.]\)\([0-9]*\) (\([0-9]*-[a-zA-Z]*-[0-9]*\)).*%\
              ver="\1";rev="\2";typ="\3";lev="\4";tim="\5"%'`
    else
        #   intialise to first version
        ver=0
        rev=1
        typ=.
        lev=0
        tim=calc
    fi
    
    #   determine new version in batch
    if [ ".$opt_i" != . ]; then
        case $opt_i in
            v ) ver=`expr $ver + 1`
                rev=0
                lev=0
                ;;
            r ) rev=`expr $rev + 1`
                lev=0
                ;;
            l ) lev=`expr $lev + 1`
                ;;
            * ) echo "$msgprefix:Error: invalid argument to option \`-i': \`$opt_i'" 1>&2
                exit 1
                ;;
        esac
        tim=calc
    fi
    
    #   determine new version interactively
    if [ ".$opt_e" = .yes ]; then
        echo "old version: ${ver}.${rev}${typ}${lev}"
        while [ 1 ]; do
            echo dummy | awk '{ printf("new version: "); }'
            read triple
            case $triple in
                [0-9]*.[0-9]*[sabp.][0-9]* )
                    ;;
                * ) echo "$msgprefix:Error: invalid version string entered: \`$triple'" 1>&2
                    continue
                    ;;
            esac
            break
        done
        eval `echo $triple |\
              sed -e 's%^\([0-9]*\)\.\([0-9]*\)\([sabp.]\)\([0-9]*\)$%\
              ver="\1";rev="\2";typ="\3";lev="\4"%'`
        tim=calc
    fi
    
    #   determine hexadecimal and libtool value of version
    case $typ in
        a     ) typnum=0;  levnum=$lev ;;
        b     ) typnum=1;  levnum=$lev ;;
        p | . ) typnum=2;  levnum=$lev ;;
        s     ) typnum=15; levnum=255  ;; # snapshots are special
    esac
    hex=`echo "$ver:$rev:$typnum:$levnum" |\
         awk -F: '{ printf("0x%x%02x%1x%02x", $1, $2, $3, $4); }' |\
         tr 'abcdef' 'ABCDEF'`
    ltv=`echo "$ver:$rev:$typnum:$levnum" |\
         awk -F: '{ printf("%d:%d", $1*10 + $2, $3*10 + $4); }'`
    
    #   determine date
    if [ ".$tim" = .calc ]; then
        day=`date '+%d'`
        month=`date '+%m'`
        year=`date '+%Y' 2>/dev/null`
        if [ ".$time_year" = . ]; then
            year=`date '+%y'`
            case $year in
                [5-9][0-9]) year="19$year" ;;
                [0-4][0-9]) year="20$year" ;;
            esac
        fi
        case $month in
            1|01) month='Jan' ;;
            2|02) month='Feb' ;;
            3|03) month='Mar' ;;
            4|04) month='Apr' ;;
            5|05) month='May' ;;
            6|06) month='Jun' ;;
            7|07) month='Jul' ;;
            8|08) month='Aug' ;;
            9|09) month='Sep' ;;
              10) month='Oct' ;;
              11) month='Nov' ;;
              12) month='Dec' ;;
        esac
        tim="${day}-${month}-${year}"
    fi
    
    #   perform result actions
    mode=show
    if [ ".$opt_i" != . ]; then
        mode=edit
    elif [ ".$opt_e" = .yes ]; then
        mode=edit
    elif [ ".$opt_s" != . ]; then
        mode=edit
    fi
    if [ ".$mode" = .show ]; then
        #   just display the current version
        case $opt_d in
            short )
                echo "${ver}.${rev}${typ}${lev}"
                ;;
            long )
                echo "${ver}.${rev}${typ}${lev} ($tim)"
                ;;
            libtool )
                echo "${ltv}"
                ;;
            hex )
                echo "${hex}"
                ;;
            * ) echo "$msgprefix:Error: invalid argument to option \`-d': \`$opt_d'" 1>&2
                exit 1
                ;;
        esac
    else
        #   update the version file
    
        #   pre-generate various strings
        triple="${ver}.${rev}${typ}${lev}"
        vHex="$hex"
        vShort="${triple}"
        vLong="${triple} (${tim})"
        vTeX="This is ${name}, Version ${triple} (${tim})"
        vGNU="${name} ${triple} (${tim})"
        vWeb="${name}/${triple}"
        vSCCS="@(#)${name} ${triple} (${tim})"
        vRCS="\$Id: ${name} ${triple} (${tim}) \$"
    
        #   determine string out of filename
        #   (do NOT try to optimize this in any way because of portability)
        filestr=`echo $file |\
                 tr 'abcdefghijklmnopqrstuvwxyz./%+' \
                    'ABCDEFGHIJKLMNOPQRSTUVWXYZ____' | sed -e 's/-/_/g'`
    
        #   generate uppercase prefix
        prefixupper=`echo $prefix |\
                     tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
    
        #   create the version file according the the selected language
        echo "new version: ${vLong}"
    
        cp /dev/null $file
        case $opt_l in
            txt )
                echo >>$file ""
                echo >>$file "  ${file} -- Version Information for ${name} (syntax: Text)"
                echo >>$file "  [automatically generated and maintained by GNU shtool]"
                echo >>$file ""
                echo >>$file "  $vTeX"
                echo >>$file ""
                ;;
            c )
                echo >>$file "/*"
                echo >>$file "**  ${file} -- Version Information for ${name} (syntax: C/C++)"
                echo >>$file "**  [automatically generated and maintained by GNU shtool]"
                echo >>$file "*/"
                echo >>$file ""
                echo >>$file "#ifdef _${filestr}_AS_HEADER_"
                echo >>$file ""
                echo >>$file "#ifndef _${filestr}_"
                echo >>$file "#define _${filestr}_"
                echo >>$file ""
                echo >>$file "#define ${prefixupper}VERSION ${vHex}"
                echo >>$file ""
                echo >>$file "typedef struct {"
                echo >>$file "    const int   v_hex;"
                echo >>$file "    const char *v_short;"
                echo >>$file "    const char *v_long;"
                echo >>$file "    const char *v_tex;"
                echo >>$file "    const char *v_gnu;"
                echo >>$file "    const char *v_web;"
                echo >>$file "    const char *v_sccs;"
                echo >>$file "    const char *v_rcs;"
                echo >>$file "} ${prefix}version_t;"
                echo >>$file ""
                echo >>$file "extern ${prefix}version_t ${prefix}version;"
                echo >>$file ""
                echo >>$file "#endif /* _${filestr}_ */"
                echo >>$file ""
                echo >>$file "#else /* _${filestr}_AS_HEADER_ */"
                echo >>$file ""
                echo >>$file "#define _${filestr}_AS_HEADER_"
                echo >>$file "#include \"${file}\""
                echo >>$file "#undef  _${filestr}_AS_HEADER_"
                echo >>$file ""
                echo >>$file "${prefix}version_t ${prefix}version = {"
                echo >>$file "    ${vHex},"
                echo >>$file "    \"${vShort}\","
                echo >>$file "    \"${vLong}\","
                echo >>$file "    \"${vTeX}\","
                echo >>$file "    \"${vGNU}\","
                echo >>$file "    \"${vWeb}\","
                echo >>$file "    \"${vSCCS}\","
                echo >>$file "    \"${vRCS}\""
                echo >>$file "};"
                echo >>$file ""
                echo >>$file "#endif /* _${filestr}_AS_HEADER_ */"
                echo >>$file ""
                ;;
            perl )
                echo >>$file "##"
                echo >>$file "##  ${file} -- Version Information for ${name} (syntax: Perl)"
                echo >>$file "##  [automatically generated and maintained by GNU shtool]"
                echo >>$file "##"
                echo >>$file ""
                echo >>$file "my \$${prefix}version = {"
                echo >>$file "    'v_hex'   => ${vHex},"
                echo >>$file "    'v_short' => \"${vShort}\","
                echo >>$file "    'v_long'  => \"${vLong}\","
                echo >>$file "    'v_tex'   => \"${vTeX}\","
                echo >>$file "    'v_gnu'   => \"${vGNU}\","
                echo >>$file "    'v_web'   => \"${vWeb}\","
                echo >>$file "    'v_sccs'  => \"${vSCCS}\","
                echo >>$file "    'v_rcs'   => \"\\${vRCS}/\""
                echo >>$file "};"
                echo >>$file ""
                echo >>$file "1;"
                echo >>$file ""
                ;;
            python )
                echo >>$file "##"
                echo >>$file "##  ${file} -- Version Information for ${name} (syntax: Python)"
                echo >>$file "##  [automatically generated and maintained by GNU shtool]"
                echo >>$file "##"
                echo >>$file ""
                echo >>$file "class ${prefix}version:"
                echo >>$file "    v_hex       = ${vHex}"
                echo >>$file "    v_short     = \"${vShort}\""
                echo >>$file "    v_long      = \"${vLong}\""
                echo >>$file "    v_tex       = \"${vTeX}\""
                echo >>$file "    v_gnu       = \"${vGNU}\""
                echo >>$file "    v_web       = \"${vWeb}\""
                echo >>$file "    v_sccs      = \"${vSCCS}\""
                echo >>$file "    v_rcs       = \"${vRCS}\""
                echo >>$file ""
                ;;
            * ) echo "$msgprefix:Error: invalid argument to option \`-l': \`$opt_l'" 1>&2
                exit 1
                ;;
        esac
    fi
    ;;

esac

exit 0

##EOF##
