.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WML 1"
.TH WML 1 "2015-06-24" "EN Tools" "EN Tools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WML \- Website META Language
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW@WML_VERSION\fR@
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBwml\fR
[\fB\-I\fR \fI\s-1PATH\s0\fR]
[\fB\-i\fR \fI\s-1PATH\s0\fR]
[\fB\-D\fR \fI\s-1NAME\s0\fR\fB=\fR\fI\s-1STR\s0\fR]
[\fB\-D\fR \fI\s-1NAME\s0\fR\fB~\fR\fI\s-1PATH\s0\fR]
[\fB\-n\fR]
[\fB\-r\fR]
[\fB\-O\fR \fIlevel\fR]
[\fB\-o\fR [\fI\s-1SLICETERM\s0\fR\f(CW\*(C`:\*(C'\fR]\fI\s-1PATH\s0\fR[\fB@\fR\fI\s-1CHMODOPT\s0\fR]]
[\fB\-P\fR \fI\s-1PATH\s0\fR]
[\fB\-E\fR \fI\s-1PATH\s0\fR]
[\fB\-t\fR] 
[\fB\-p\fR \fI\s-1STR\s0\fR]
[\fB\-W\fR \fI\s-1STR\s0\fR]
[\fB\-s\fR]
[\fB\-v\fR [\fI\s-1NUM\s0\fR]]
[\fB\-q\fR]
[\fIinputfile\fR]
.PP
\&\fBwml\fR
[\fB\-V\fR [\fI\s-1NUM\s0\fR]] 
[\fB\-h\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the control program of the \fIWebsite \s-1META\s0 Language\fR (\s-1WML\s0), a free \s-1HTML\s0
generation toolkit for Unix, internally consisting of 9 independent languages.
.PP
The main idea of \s-1WML\s0 is a sequential filtering scheme where each language
provides one of 9 processing passes.  So \fIwml\fR reads \fIinputfile\fR (or from
\&\fIstdin\fR if \fIinputfile\fR is a dash or completely missing), applies passes 1\-9
(or only the passes specified by \fB\-p\fR) and finally produces one or more
\&\fIoutputfile\fRs.
.PP
For more details on this processing scheme read the \fI\s-1WML\s0 Introduction\fR under
\&\fIwml_intro\fR\|(7) and the \fI\s-1WML\s0 Tutorial\fR under \fIwml_tutorial\fR\|(7).
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-I\fR, \fB\-\-include=\fR\fI\s-1PATH\s0\fR" 4
.IX Item "-I, --include=PATH"
Adds a \fIdirectory\fR to the list of user include paths. Use this option to set the
runtime environment for pass 1. See \fIwml_p1_ipp\fR\|(1) for more details.
.IP "\fB\-i\fR, \fB\-\-includefile=\fR\fI\s-1PATH\s0\fR" 4
.IX Item "-i, --includefile=PATH"
Pre-loads a particular include \fIfile\fR, i.e. virtually adds a
.Sp
.Vb 1
\&  #include "PATH"
.Ve
.Sp
at the top of \fIinputfile\fR. Use this to automatically include default user
include files. If you want to include a systems include file you have to
surround the \fI\s-1PATH\s0\fR with angle brackets, for instance use ``\f(CW\*(C`\-i\*(C'\fR
\&\f(CW"<foo/bar.wml>"\fR'' to include the file \fIfoo/bar.wml\fR from the
system include area.  Alternatively you can use the special syntax
``\f(CW\*(C`wml::foo::bar\*(C'\fR'' as with the \f(CW\*(C`#use\*(C'\fR directive.
.IP "\fB\-D\fR, \fB\-\-define=\fR\fI\s-1NAME\s0\fR\fB=\fR\fI\s-1STR\s0\fR" 4
.IX Item "-D, --define=NAME=STR"
Defines a variable which can be interpolated in pass 1 (\s-1IPP\s0) via \f(CW\*(C`$(NAME)\*(C'\fR, in
pass 2 (mp4h) via <\f(CW\*(C`get\-var NAME\*(C'\fR>, in pass 3 (ePerl) via
\&\f(CW\*(C`<:=$NAME:>\*(C'\fR and in pass 4 (\s-1GNU\s0 m4) via \f(CW\*(C`m4_NAME\*(C'\fR.
A special variant \fB\-\-define=\fR\fI\s-1NAME\s0\fR\fB=UNDEF\fR does the opposite, it
deletes previous definitions (which may be different than undefining
these variables, e.g. with system defined variables).
.IP "\fB\-D\fR, \fB\-\-define=\fR\fI\s-1NAME\s0\fR\fB~\fR\fI\s-1PATH\s0\fR" 4
.IX Item "-D, --define=NAME~PATH"
Similar to the above but defines a variable holding a pathname which is
autoadjusted (see below).  It can be interpolated in the same ways as the
\&\f(CW\*(C`NAME=STR\*(C'\fR variant from above.
.IP "\fB\-n\fR, \fB\-\-noshebang\fR" 4
.IX Item "-n, --noshebang"
This forces \s-1WML\s0 to ignore a possibly contained shebang line in \fIinputfile\fR.
This is usually used by WMk, because WMk already parsed this line and supplied
the options to \s-1WML.\s0
.IP "\fB\-r\fR, \fB\-\-norcfile\fR" 4
.IX Item "-r, --norcfile"
This forces \s-1WML\s0 to ignore all \fI.wmlrc\fR files.
.IP "\fB\-c\fR, \fB\-\-nocd\fR" 4
.IX Item "-c, --nocd"
When \s-1WML\s0 processes an input file from another directory, it jumps into
that directory before parsing \fI.wmlrc\fR files, and jump back to current
directory after.  If this option is set, no directory change is made and
\&\fI.wmlrc\fR files are read reative to current working directory.
.IP "\fB\-O\fR, \fB\-\-optimize=\fR\fI\s-1NUM\s0\fR" 4
.IX Item "-O, --optimize=NUM"
This is the optimization option which is passed directly to pass 8
(\fIhtmlfix\fR). It controls the amount of optimization/stripping which is
applied to the generated \s-1HTML\s0 markup code.
.IP "\fB\-o\fR, \fB\-\-outputfile=\fR\fI\s-1SLICETERM\s0\fR\fB:\fR\fIoutputfile\fR[\fB@\fR\fI\s-1CHMODOPT\s0\fR]" 4
.IX Item "-o, --outputfile=SLICETERM:outputfile[@CHMODOPT]"
This redirects the output to a file. Usually the whole file will be send to
\&\fIstdout\fR (same as \f(CW\*(C`ALL:\-\*(C'\fR). You can use this option more than once to output
to more than one file while using the \fI\s-1SLICETERM\s0\fR as a set theory term of
slices to determine which contents will be included into each particular
output file.  The optional \fI\s-1CHMODOPT\s0\fR is intended for specifying options for
a finally applied \fIchmod\fR command. For instance use ``\f(CW\*(C`u+x\*(C'\fR'' to create a
file with the execution bit set (Apache's XBitHack feature).
See \fIwml_p9_slice\fR\|(1) for more details.
.IP "\fB\-P\fR, \fB\-\-prolog=\fR\fI\s-1PATH\s0\fR" 4
.IX Item "-P, --prolog=PATH"
Runs an prolog filter over the input file.  This program receives the data to
act on as \s-1STDIN\s0 and has to produce the filtered data on \s-1STDOUT.\s0
.IP "\fB\-E\fR, \fB\-\-epilog=\fR\fI\s-1PATH\s0\fR" 4
.IX Item "-E, --epilog=PATH"
Runs an epilogue program over the finally resulting output files.  Currently
the following WML-specific programs are known: \fIhtmlinfo\fR, \fIlinklint\fR,
\&\fItidy\fR and \fIweblint\fR.  But you can specify any program which is available in
your \f(CW\*(C`PATH\*(C'\fR. This program receives the file to act on as its first command
line argument. Notice that output is not redirected to this file, so you have
to use a wrapper or program specific flags if you want to modify output files.
.IP "\fB\-t\fR, \fB\-\-settime\fR" 4
.IX Item "-t, --settime"
This sets the modification time of all output files to the modification time
of \fIintputfile\fR plus 1 second. This is useful because Webservers will
generate \f(CW\*(C`Last\-Modified\*(C'\fR headers and there the editing time is more important
than the generation time. The 1 second offset is for the dependencies
of Makefiles.
.IP "\fB\-M\fR, \fB\-\-depend\fR[\fB=\fR\fI\s-1OPTIONS\s0\fR]" 4
.IX Item "-M, --depend[=OPTIONS]"
Output a rule suitable for `make' describing the dependencies of each output
file, as `gcc' does. It has only sense when the \fB\-o\fR option is used.
No processing is done except for the first pass.
.Sp
The \fBD\fR flag option writes the rule to a dependency file. The name of
this file is obtained by replacing the suffix of the output file by \*(L".d\*(R".
.Sp
The \fBM\fR flag option deletes the system files from the list of dependencies.
.IP "\fB\-p\fR, \fB\-\-pass=\fR\fI\s-1STR\s0\fR" 4
.IX Item "-p, --pass=STR"
Specifies which of the passes described above are actually applied under
runtime. The argument \fI\s-1STR\s0\fR is a comma-separated list of pass numbers with
one special case: You can write \f(CW\*(C`X\-Y\*(C'\fR for all passes \f(CW\*(C`X...Y\*(C'\fR.  When pass 9
is not part of \fI\s-1STR\s0\fR the resulting output is written to \fI\s-1STDOUT\s0\fR. Default is
the string ``\f(CW\*(C`1\-9\*(C'\fR''.
.IP "\fB\-W\fR, \fB\-\-passoption=\fR\fI\s-1NUM\s0\fR,\fI\s-1STR\s0\fR" 4
.IX Item "-W, --passoption=NUM,STR"
Set option \fI\s-1STR\s0\fR for the pass \fI\s-1NUM\s0\fR.
.IP "\fB\-s\fR, \fB\-\-safe\fR" 4
.IX Item "-s, --safe"
This disables some Perl hacks inside \s-1WML\s0 which speedup processing by reducing
the forking overhead when running the various passes.
.Sp
Without this option \s-1WML\s0 pre-compiles the passes 1,5,6,7,8 (which are written
in Perl!) into a different namespace of the currently running Perl interpreter
instead of running them externally via \f(CW\*(C`system()\*(C'\fR. The effect is that these
programs are run from within the same Perl interpreter thus saving five \s-1CPU\-\s0
and time-intensive \f(CW\*(C`fork()\*(C'\fR's. The actual gain is between 2 and 4 seconds of
processing time. Although experience showed that it works great, the
theoretical problem still is, that this approach is somewhat risky due to
internal Perl variable conflicts.
.Sp
Use this option to disable these speedups by forcing \s-1WML\s0 to use the safe
\&\f(CW\*(C`fork()\*(C'\fR approach.
.IP "\fB\-v\fR, \fB\-\-verbose\fR[\fB=\fR\fI\s-1NUM\s0\fR]" 4
.IX Item "-v, --verbose[=NUM]"
This sets verbose mode (from 1 to 9) where some processing information will be
given on the console. Useful for debugging. This option also gets passed to
some of the filtering programs. Default is no verbosity and just \fB\-v\fR means
\&\fB\-v1\fR.
.IP "\fB\-q\fR, \fB\-\-quiet\fR" 4
.IX Item "-q, --quiet"
This sets quiet mode where the processing prop is no longer displayed.  Use
this option when running \fIwml\fR as a batch job.  This option is automatically
forced when \fIinputfile\fR is missing.  Then \s-1WML\s0 automatically reads from
\&\fIstdin\fR in quiet mode.
.IP "\fB\-V\fR, \fB\-\-version\fR[\fB=\fR\fI\s-1NUM\s0\fR]" 4
.IX Item "-V, --version[=NUM]"
Gives the version identification string and disclaimer (no \fI\s-1NUM\s0\fR or \fI\s-1NUM\s0\fR
>= 1), the \s-1WML\s0 build information (\fI\s-1NUM\s0\fR >= 2) and the Perl build
information (\fI\s-1NUM\s0\fR >= 3). Use this option to get a brief description of
your installed \s-1WML\s0 system, especially when reporting bugs to the author.
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Prints the usage summary page.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.SS "\s-1DEFINED VARIABLES\s0"
.IX Subsection "DEFINED VARIABLES"
The following variables are always defined by \fIwml\fR under runtime and are
usually interpolated via <\f(CW\*(C`get\-var NAME\*(C'\fR> inside Pass 2 and via
\&\f(CW$NAME\fR in Pass 3.
.IP "\s-1WML_SRC_DIRNAME\s0" 4
.IX Item "WML_SRC_DIRNAME"
The current working directory from where \fIwml\fR was started.
An absolute Unix filesystem path.
.IP "\s-1WML_SRC_FILENAME\s0" 4
.IX Item "WML_SRC_FILENAME"
The name of the \fIinputfile\fR from the command line. Useful when running \fIwml\fR
on a bulk of files and includefiles have to determine in which they are
included.
.IP "\s-1WML_SRC_BASENAME\s0" 4
.IX Item "WML_SRC_BASENAME"
The basename of the \fIinputfile\fR, i.e. the \f(CW\*(C`WML_SRC_FILENAME\*(C'\fR, but with the
extension already stripped.
.IP "\s-1WML_SRC_TIME\s0" 4
.IX Item "WML_SRC_TIME"
The last modification time of \fIinputfile\fR in \f(CW\*(C`time()\*(C'\fR format.
Useful inside footers when customized date format is needed.
.IP "\s-1WML_SRC_CTIME\s0" 4
.IX Item "WML_SRC_CTIME"
The last modification time of \fIinputfile\fR in \f(CW\*(C`ctime()\*(C'\fR format.
Useful inside footers include files.
.IP "\s-1WML_SRC_ISOTIME\s0" 4
.IX Item "WML_SRC_ISOTIME"
The last modification time of \fIinputfile\fR in \s-1ISO \s0\f(CW\*(C`yyyy\-mm\-dd hh:mm:ss\*(C'\fR format.
Useful inside footers include files.
.IP "\s-1WML_SRC_USERNAME\s0" 4
.IX Item "WML_SRC_USERNAME"
The Unix username of the user who own \fIinputfile\fR.
.IP "\s-1WML_SRC_REALNAME\s0" 4
.IX Item "WML_SRC_REALNAME"
The realname of the user who own \fIinputfile\fR.
.IP "\s-1WML_GEN_TIME\s0" 4
.IX Item "WML_GEN_TIME"
The current time of generation in \f(CW\*(C`time()\*(C'\fR format.
Useful inside footers when customized date format is needed.
.IP "\s-1WML_GEN_CTIME\s0" 4
.IX Item "WML_GEN_CTIME"
The current time of generation in \f(CW\*(C`ctime()\*(C'\fR format.
Useful inside footers include files.
.IP "\s-1WML_GEN_ISOTIME\s0" 4
.IX Item "WML_GEN_ISOTIME"
The current time of generation in \s-1ISO \s0\f(CW\*(C`yyyy\-mm\-dd hh:mm:ss\*(C'\fR format.
Useful inside footers include files.
.IP "\s-1WML_GEN_USERNAME\s0" 4
.IX Item "WML_GEN_USERNAME"
The Unix username of the user who runs the \fIwml\fR process.
.IP "\s-1WML_GEN_REALNAME\s0" 4
.IX Item "WML_GEN_REALNAME"
The realname of the user who runs the \fIwml\fR process.
.IP "\s-1WML_GEN_HOSTNAME\s0" 4
.IX Item "WML_GEN_HOSTNAME"
The name of the host on which the \fIwml\fR command runs.
.IP "\s-1WML_LOC_PREFIX\s0" 4
.IX Item "WML_LOC_PREFIX"
The location prefix where \s-1WML\s0 was installed to at built time.
.IP "\s-1WML_LOC_BINDIR\s0" 4
.IX Item "WML_LOC_BINDIR"
The directory where \s-1WML\s0's binaries were installed to at built time.
.IP "\s-1WML_LOC_LIBDIR\s0" 4
.IX Item "WML_LOC_LIBDIR"
The directory where \s-1WML\s0's library files were installed to at built time.
.IP "\s-1WML_LOC_MANDIR\s0" 4
.IX Item "WML_LOC_MANDIR"
The directory where \s-1WML\s0's manual pages were installed to at built time.
.IP "\s-1WML_VERSION\s0" 4
.IX Item "WML_VERSION"
The version identification string of \s-1WML. \s0 Use this for instance in \s-1HTML\s0
comments inside header includes to identify the generation tools version.
.SS "\s-1USED VARIABLES\s0"
.IX Subsection "USED VARIABLES"
.ie n .IP """WMLOPTS""" 4
.el .IP "\f(CWWMLOPTS\fR" 4
.IX Item "WMLOPTS"
This variable can contain a string of options.  Usually this is used by
Bourne-Shell users like
.Sp
.Vb 2
\&  $ WMLOPTS="\-DNAME1=VALUE2 \-DNAME2=VALUE2"
\&  $ export WMLOPTS
.Ve
.Sp
and by C\-Shell users like
.Sp
.Vb 1
\&  $ setenv WMLOPTS "\-DNAME1=VALUE2 \-DNAME2=VALUE2"
.Ve
.Sp
to make sure some variables are defined for all runs of \fIwml\fR.
.ie n .IP """PAGER""" 4
.el .IP "\f(CWPAGER\fR" 4
.IX Item "PAGER"
This variable contains the pager \s-1WML\s0 is to use. \s-1WML\s0 uses a pager when
called with the \fB\-\-verbose=\fR\fI\s-1NUM\s0\fR or \fB\-v\fR\fI\s-1NUM\s0\fR option respectively and
\&\fI\s-1NUM\s0\fR is 3 or higher and therefore showing the processed data after
each pass.  Default is 'more'.
.ie n .IP """TMPDIR""" 4
.el .IP "\f(CWTMPDIR\fR" 4
.IX Item "TMPDIR"
This variable contains the directory \s-1WML\s0 stores its temporary files in.
Default is '/tmp'.
.SH "USER FILES"
.IX Header "USER FILES"
.ie n .IP "\fI\fI$HOME\fI/.wmlrc\fR and \fI(../)*.wmlrc\fR" 4
.el .IP "\fI\f(CI$HOME\fI/.wmlrc\fR and \fI(../)*.wmlrc\fR" 4
.IX Item "$HOME/.wmlrc and (../)*.wmlrc"
These files can also contain option strings, one option per line.  Usually the
contents is one or more \fB\-D\fR options, especially auto-adjusted ones:
.Sp
.Vb 6
\&  \-DROOTREL~.
\&  \-DROOTABS=http://thishost/thisarea/
\&     :
\&  \-DNAME1=VALUE1
\&  \-DNAME2=VALUE2
\&     :
.Ve
.SH "STANDARD INCLUDE FILES"
.IX Header "STANDARD INCLUDE FILES"
\&\s-1WML\s0 is shipped with a standard set of include files.
You can directly include them via
.PP
.Vb 1
\&  #use wml::category::name
.Ve
.PP
and read their own documentation via
.PP
.Vb 1
\&  $ man wml::category::name
.Ve
.PP
See \fIwml::all\fR\|(3) for a description of all available include files.
.SH "SPECIAL FEATURES"
.IX Header "SPECIAL FEATURES"
The \s-1WML\s0 control frontend provides a few special features on its own:
.IP "Shebang Line Support" 4
.IX Item "Shebang Line Support"
\&\s-1WML\s0 recognizes a \fIshebang\fR line (``\f(CW\*(C`#!wml\*(C'\fR \fIoptions\fR'') in the \fI.wml\fR
files and automatically adds \fIoptions\fR to its command line. This line is also
used by WMk. Two special features in contrast to shebang lines for the Unix
loader are available: \s-1WML\s0's shebang line can be continued via a backslash
character and the constructs \f(CW%DIR\fR and %<\s-1BASE\s0> are interpolated (where
\&\f(CW%DIR\fR is the path to the directory the source while resides and \f(CW%BASE\fR is
the filename of the source file without any extension).
.Sp
Example:
.Sp
.Vb 2
\&  #!wml \-o (ALL\-LANG_*)+LANG_EN:%BASE.en.html \e
\&        \-o (ALL\-LANG_*)+LANG_DE:%BASE.de.html
.Ve
.IP "Data Protection Container Tag" 4
.IX Item "Data Protection Container Tag"
\&\s-1WML\s0 provides an own internal container tag named \f(CW\*(C`<protect
[pass=SPEC]>\*(C'\fR...\f(CW\*(C`</protect>\*(C'\fR which can be used to protect any type
of data from being processed by any \s-1WML\s0 pass. When no \f(CW\*(C`pass\*(C'\fR attribute is
given \fI\s-1SPEC\s0\fR defaults to \f(CW\*(C`1\-9\*(C'\fR. When you use \f(CW\*(C`pass\*(C'\fR then \fI\s-1SPEC\s0\fR can be
either \f(CW\*(C`#\-\*(C'\fR, \f(CW\*(C`\-#\*(C'\fR, \f(CW\*(C`#\-#\*(C'\fR or a comma separated list of passes, while
\&\f(CW\*(C`#\*(C'\fR can be between \f(CW1\fR and \f(CW9\fR.
.Sp
Example:
.Sp
.Vb 7
\&   <script language="JavaScript">
\&   <protect pass=2>
\&   ...
\&   output = "<PRE><DIV ALIGN=\e"CENTER\e"><B>" + help_string + "</B></DIV></PRE>"
\&   ...
\&   </protect>
\&   </script>
.Ve
.Sp
Warning:
.Sp
Since \s-1WML 2.0.3,\s0 pass 1 includes extra stuff to help keeping information
about line numbers relevant (a la cpp).  So when writing
.Sp
.Vb 3
\&   <protect pass=2>
\&   #include \*(Aqfoo\*(Aq
\&   </protect>
.Ve
.Sp
these extra commands will not be interpreted during pass 2 and will
remain on output.  To suppress them, either compile with \f(CW\*(C`\-W1,\-N\*(C'\fR flag,
or write
.Sp
.Vb 3
\&   <protect pass=2>
\&   #include \*(Aqfoo\*(Aq IPP_NOSYNCLINES
\&   </protect>
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 3
\& Ralf S. Engelschall
\& rse@engelschall.com
\& www.engelschall.com
\&
\& Denis Barbier
\& barbier@engelschall.com
.Ve
.SH "SEEALSO"
.IX Header "SEEALSO"
\&\fIwmd\fR\|(1),
\&\fIwml_faq\fR\|(7),
\&\fIwml_intro\fR\|(7),
\&\fIwml_tutorial\fR\|(7),
\&\fIwml_tags\fR\|(7),
\&\fIwml::all\fR\|(3).
